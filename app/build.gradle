apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.tomsky.androiddemo"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets{  
        main{ 
            java.srcDirs = ['src/main/java', 'build/tmp/interface']
        }  
    } 
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    api 'com.android.support:appcompat-v7:27.1.0'
    api 'com.android.support:recyclerview-v7:27.1.0'
    api 'com.android.support:support-v4:27.1.0'
    api 'com.android.support:support-v13:27.1.0'
    api 'com.android.support:design:27.1.0'
    api 'com.android.support:palette-v7:27.1.0'
    api 'com.android.support:cardview-v7:27.1.0'
    api 'io.reactivex.rxjava2:rxjava:2.1.5'
    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
    api 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.tencent:mmkv:1.0.10'

    // for dagger2
    api 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    // bellow is for using classes in dagger.android
    api 'com.google.dagger:dagger-android:2.11'
    api 'com.google.dagger:dagger-android-support:2.11'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.11'

    api project(':danmaku')
    api project(':topsnackbar')
    testImplementation 'junit:junit:4.12'
}


// task compileApi(type: JavaCompile) {
    // doFirst {
        //println "buildDir: $buildDir"
        // println "projectDir: $projectDir"
        //println "rootDir: $rootDir"
        // javaCompile {
            // source = src/main/java
            // include 'com/tomsky/androiddemo/api/*.api'
            //classpath = sourceSets.main.compileClasspath
            // destinationDir = src/main/java
        // }
    // }
// }

task copyApi(type: Copy) {
    //def destDir = file("build/tmp/interface/com/tomsky/androiddemo/api")
    //destDir.mkdirs()

    from 'src/main/java/com/tomsky/androiddemo/api'
    into 'build/tmp/interface/com/tomsky/androiddemo/api'
    //使用闭包映射文件名
    rename { String fileName ->
        fileName.replace('.api', '.java')
    }
    // 使用正则表达式映射文件名
    //rename '(.+)-staging-(.+)', '$1$2'
    //rename(/(.+)-staging-(.+)/, '$1$2')
}

afterEvaluate {  
    tasks.matching {  
        it.name == "generateDebugSources" || it.name == "generateReleaseSources"
    }.each { tk -> 
        tk.dependsOn(copyApi)  
    }  
}

task buildApiJar(type: Jar, dependsOn: ['compileDebugSources']) {
    //导出的jar文件名称
    archiveName = 'interface.jar'
    //从哪个目录打包jar
    from('build/intermediates/classes/debug')
    //导出的jar文件的存放目录（未指定则默认存放在build/libs下）
    destinationDir = file('build/libs')
    //去掉不要的类
    //exclude('com/example/testapp/BuildConfig.class')
    //exclude('com/example/testapp/BuildConfig\$*.class')
    //exclude('**/R.class')
    //exclude('**/R\$*.class')
    //需要打包的类
    include('com/tomsky/androiddemo/api/*.class')
}

task testPath() {
    File file = new File('test.txt')
    print 'file path:'+file.getAbsolutePath()
}
