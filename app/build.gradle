apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

//import org.aspectj.bridge.IMessage
//import org.aspectj.bridge.MessageHandler
//import org.aspectj.tools.ajc.Main

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.tomsky.androiddemo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilter "armeabi-v7a"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets{  
        main{ 
            java.srcDirs = ['src/main/java', 'build/tmp/interface', 'src/main/kotlin']
        }  
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlin{
        experimental {
            coroutines 'enable'
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    api depen.appcompat
    api depen.recycleview
    api depen.support
    api 'com.android.support:support-v13:28.0.0'
    api depen.design
    api 'com.android.support:palette-v7:28.0.0'
    api depen.cardview
    api 'io.reactivex.rxjava2:rxjava:2.1.5'
    api 'io.reactivex.rxjava2:rxandroid:2.0.1'
    api depen.constraintLayout
    api depen.fresco
    api depen.frescoGif
    api depen.frescoOkHttp
    api depen.frescoWebp
    api depen.frescoWebpsupport
    implementation 'com.tencent:mmkv:1.0.19'
    api 'com.eclipsesource.j2v8:j2v8:4.5.0@aar'

    implementation 'org.aspectj:aspectjrt:1.8.13'

    api project(':danmaku')
    api project(':topsnackbar')
    testImplementation 'junit:junit:4.12'

//    implementation project(':flutter')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'
}

//project.android.applicationVariants.all { variant ->
//    JavaCompile javaCompile = variant.javaCompile
//    javaCompile.doLast {
//        String[] args = ["-showWeaveInfo",
//                         "-1.8",
//                         "-inpath", javaCompile.destinationDir.toString(),
//                         "-aspectpath", javaCompile.classpath.asPath,
//                         "-d", javaCompile.destinationDir.toString(),
//                         "-classpath", javaCompile.classpath.asPath,
//                         "-bootclasspath", project.android.bootClasspath.join(
//                File.pathSeparator)]
//        MessageHandler handler = new MessageHandler(true);
//        new Main().run(args, handler)
//        def log = project.logger
//        for (IMessage message : handler.getMessages(null, true)) {
//            switch (message.getKind()) {
//                case IMessage.ABORT:
//                case IMessage.ERROR:
//                case IMessage.FAIL:
//                    log.error message.message, message.thrown
//                    break;
//                case IMessage.WARNING:
//                case IMessage.INFO:
//                    log.info message.message, message.thrown
//                    break;
//                case IMessage.DEBUG:
//                    log.debug message.message, message.thrown
//                    break;
//            }
//        }
//    }
//}

// task compileApi(type: JavaCompile) {
    // doFirst {
        //println "buildDir: $buildDir"
        // println "projectDir: $projectDir"
        //println "rootDir: $rootDir"
        // javaCompile {
            // source = src/main/java
            // include 'com/tomsky/androiddemo/api/*.api'
            //classpath = sourceSets.main.compileClasspath
            // destinationDir = src/main/java
        // }
    // }
// }

task copyApi(type: Copy) {
    //def destDir = file("build/tmp/interface/com/tomsky/androiddemo/api")
    //destDir.mkdirs()

    from 'src/main/java/com/tomsky/androiddemo/api'
    into 'build/tmp/interface/com/tomsky/androiddemo/api'
    //使用闭包映射文件名
    rename { String fileName ->
        fileName.replace('.api', '.java')
    }
    // 使用正则表达式映射文件名
    //rename '(.+)-staging-(.+)', '$1$2'
    //rename(/(.+)-staging-(.+)/, '$1$2')
}

afterEvaluate {  
    tasks.matching {  
        it.name == "generateDebugSources" || it.name == "generateReleaseSources"
    }.each { tk -> 
        tk.dependsOn(copyApi)  
    }  
}

task buildApiJar(type: Jar, dependsOn: ['compileDebugSources']) {
    //导出的jar文件名称
    archiveName = 'interface.jar'
    //从哪个目录打包jar
    from('build/intermediates/classes/debug')
    //导出的jar文件的存放目录（未指定则默认存放在build/libs下）
    destinationDir = file('build/libs')
    //去掉不要的类
    //exclude('com/example/testapp/BuildConfig.class')
    //exclude('com/example/testapp/BuildConfig\$*.class')
    //exclude('**/R.class')
    //exclude('**/R\$*.class')
    //需要打包的类
    include('com/tomsky/androiddemo/api/*.class')
}

task testPath() {
    File file = new File('test.txt')
    print 'file path:'+file.getAbsolutePath()
}
repositories {
    mavenCentral()
}
